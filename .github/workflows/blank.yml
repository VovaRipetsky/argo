# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy to Amazon EKS using the yaml in `manifests` and Kustomize,
# on every push to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an EKS cluster.
#    For example: `eksctl create cluster`
# 2. Create an ECR repository to store your images.
#    For example:
#      `aws ecr create-repository --repository-name example-eks --region us-east-2`.
#      Replace the value of `ECR_REPOSITORY` in the workflow below with your 
#      repository's name if you use something other than `example-eks`.
# 3. Replace the value of `AWS_REGION` and `EKS_CLUSTER_NAME` in the workflow below
#    with the appropriate values.
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID`
#    and `AWS_SECRET_ACCESS_KEY`.

on:
  push:
    branches:
      - main

name: Deploy to Amazon EKS

env:
  AWS_REGION: us-east-2                   # set this to your preferred AWS region, e.g. us-west-1

  ECR_REPOSITORY: codedeploy
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-east-2
      EKS_CLUSTER_NAME: vova1

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EKS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"
    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
    - name: Deploy k8s yaml
      id: deploy-k8s-yaml
      env:
        
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        helm upgrade --install backend application-ing/ --set container.image=$ECR_REGISTRY/$ECR_REPOSITORY:latest 
        
